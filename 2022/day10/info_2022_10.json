{
    "title": "Day 10: CathodeRay Tube",
    "easter_eggs": [
        "While you're at it, go watch everything else by Retro Game Mechanics Explained, too."
    ],
    "test_input_idx": 1,
    "part_1": {
        "text": "You avoid the ropes, plunge into the river, and swim to shore.\n\nThe Elves yell something about meeting back up with them upriver, but the river is too loud to tell exactly what they're saying.\nThey finish crossing the bridge and disappear from view.\n\nSituations like this must be why the Elves prioritized getting the communication system on your handheld device working.\nYou pull it out of your pack, but the amount of water slowly draining from a big crack in its screen tells you it probably won't be of much immediate use.\n\nUnless, that is, you can design a replacement for the device's video system! It seems to be some kind of cathode-ray tube screen and simple CPU that are both driven by a precise clock circuit.\nThe clock circuit ticks at a constant rate; each tick is called a cycle.\n\nStart by figuring out the signal being sent by the CPU.\nThe CPU has a single register, X, which starts with the value 1.\nIt supports only two instructions:\n\naddx V takes two cycles to complete.\nAfter two cycles, the X register is increased by the value V.\n(V can be negative.)\nnoop takes one cycle to complete.\nIt has no other effect.\n\nThe CPU uses these instructions in a program (your puzzle input) to, somehow, tell the screen what to draw.\n\nConsider the following small program:\n\nnoop\naddx 3\naddx -5\n\nExecution of this program proceeds as follows:\n\nAt the start of the first cycle, the noop instruction begins execution.\nDuring the first cycle, X is 1.\nAfter the first cycle, the noop instruction finishes execution, doing nothing.\nAt the start of the second cycle, the addx 3 instruction begins execution.\nDuring the second cycle, X is still 1.\nDuring the third cycle, X is still 1.\nAfter the third cycle, the addx 3 instruction finishes execution, setting X to 4.\nAt the start of the fourth cycle, the addx -5 instruction begins execution.\nDuring the fourth cycle, X is still 4.\nDuring the fifth cycle, X is still 4.\nAfter the fifth cycle, the addx -5 instruction finishes execution, setting X to -1.\n\nMaybe you can learn something by looking at the value of the X register throughout execution.\nFor now, consider the signal strength (the cycle number multiplied by the value of the X register) during the 20th cycle and every 40 cycles after that (that is, during the 20th, 60th, 100th, 140th, 180th, and 220th cycles).\n\nFor example, consider this larger program:\n\naddx 15\naddx -11\naddx 6\naddx -3\naddx 5\naddx -1\naddx -8\naddx 13\naddx 4\nnoop\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx -35\naddx 1\naddx 24\naddx -19\naddx 1\naddx 16\naddx -11\nnoop\nnoop\naddx 21\naddx -15\nnoop\nnoop\naddx -3\naddx 9\naddx 1\naddx -3\naddx 8\naddx 1\naddx 5\nnoop\nnoop\nnoop\nnoop\nnoop\naddx -36\nnoop\naddx 1\naddx 7\nnoop\nnoop\nnoop\naddx 2\naddx 6\nnoop\nnoop\nnoop\nnoop\nnoop\naddx 1\nnoop\nnoop\naddx 7\naddx 1\nnoop\naddx -13\naddx 13\naddx 7\nnoop\naddx 1\naddx -33\nnoop\nnoop\nnoop\naddx 2\nnoop\nnoop\nnoop\naddx 8\nnoop\naddx -1\naddx 2\naddx 1\nnoop\naddx 17\naddx -9\naddx 1\naddx 1\naddx -3\naddx 11\nnoop\nnoop\naddx 1\nnoop\naddx 1\nnoop\nnoop\naddx -13\naddx -19\naddx 1\naddx 3\naddx 26\naddx -30\naddx 12\naddx -1\naddx 3\naddx 1\nnoop\nnoop\nnoop\naddx -9\naddx 18\naddx 1\naddx 2\nnoop\nnoop\naddx 9\nnoop\nnoop\nnoop\naddx -1\naddx 2\naddx -37\naddx 1\naddx 3\nnoop\naddx 15\naddx -21\naddx 22\naddx -6\naddx 1\nnoop\naddx 2\naddx 1\nnoop\naddx -10\nnoop\nnoop\naddx 20\naddx 1\naddx 2\naddx 2\naddx -6\naddx -11\nnoop\nnoop\nnoop\n\nThe interesting signal strengths can be determined as follows:\n\nDuring the 20th cycle, register X has the value 21, so the signal strength is 20 * 21 = 420.\n(The 20th cycle occurs in the middle of the second addx -1, so the value of register X is the starting value, 1, plus all of the other addx values up to that point: 1 + 15 - 11 + 6 - 3 + 5 - 1 - 8 + 13 + 4 = 21.)\nDuring the 60th cycle, register X has the value 19, so the signal strength is 60 * 19 = 1140.\nDuring the 100th cycle, register X has the value 18, so the signal strength is 100 * 18 = 1800.\nDuring the 140th cycle, register X has the value 21, so the signal strength is 140 * 21 = 2940.\nDuring the 180th cycle, register X has the value 16, so the signal strength is 180 * 16 = 2880.\nDuring the 220th cycle, register X has the value 18, so the signal strength is 220 * 18 = 3960.\n\nThe sum of these signal strengths is 13140.\n\nFind the signal strength during the 20th, 60th, 100th, 140th, 180th, and 220th cycles.\nWhat is the sum of these six signal strengths?",
        "test_input": "addx 15\naddx -11\naddx 6\naddx -3\naddx 5\naddx -1\naddx -8\naddx 13\naddx 4\nnoop\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx -35\naddx 1\naddx 24\naddx -19\naddx 1\naddx 16\naddx -11\nnoop\nnoop\naddx 21\naddx -15\nnoop\nnoop\naddx -3\naddx 9\naddx 1\naddx -3\naddx 8\naddx 1\naddx 5\nnoop\nnoop\nnoop\nnoop\nnoop\naddx -36\nnoop\naddx 1\naddx 7\nnoop\nnoop\nnoop\naddx 2\naddx 6\nnoop\nnoop\nnoop\nnoop\nnoop\naddx 1\nnoop\nnoop\naddx 7\naddx 1\nnoop\naddx -13\naddx 13\naddx 7\nnoop\naddx 1\naddx -33\nnoop\nnoop\nnoop\naddx 2\nnoop\nnoop\nnoop\naddx 8\nnoop\naddx -1\naddx 2\naddx 1\nnoop\naddx 17\naddx -9\naddx 1\naddx 1\naddx -3\naddx 11\nnoop\nnoop\naddx 1\nnoop\naddx 1\nnoop\nnoop\naddx -13\naddx -19\naddx 1\naddx 3\naddx 26\naddx -30\naddx 12\naddx -1\naddx 3\naddx 1\nnoop\nnoop\nnoop\naddx -9\naddx 18\naddx 1\naddx 2\nnoop\nnoop\naddx 9\nnoop\nnoop\nnoop\naddx -1\naddx 2\naddx -37\naddx 1\naddx 3\nnoop\naddx 15\naddx -21\naddx 22\naddx -6\naddx 1\nnoop\naddx 2\naddx 1\nnoop\naddx -10\nnoop\nnoop\naddx 20\naddx 1\naddx 2\naddx 2\naddx -6\naddx -11\nnoop\nnoop\nnoop\n",
        "test_answer": 13140,
        "test_answer_idx": -1,
        "answer": "13520",
        "time": 9.71001572906971e-05
    },
    "part_2": {
        "text": "It seems like the X register controls the horizontal position of a sprite.\nSpecifically, the sprite is 3 pixels wide, and the X register sets the horizontal position of the middle of that sprite.\n(In this system, there is no such thing as \"vertical position\": if the sprite's horizontal position puts its pixels where the CRT is currently drawing, then those pixels will be drawn.)\n\nYou count the pixels on the CRT: 40 wide and 6 high.\nThis CRT screen draws the top row of pixels left-to-right, then the row below that, and so on.\nThe left-most pixel in each row is in position 0, and the right-most pixel in each row is in position 39.\n\nLike the CPU, the CRT is tied closely to the clock circuit: the CRT draws a single pixel during each cycle.\nRepresenting each pixel of the screen as a #, here are the cycles during which the first and last pixel in each row are drawn:\n\nCycle   1 -> ######################################## <- Cycle  40\nCycle  41 -> ######################################## <- Cycle  80\nCycle  81 -> ######################################## <- Cycle 120\nCycle 121 -> ######################################## <- Cycle 160\nCycle 161 -> ######################################## <- Cycle 200\nCycle 201 -> ######################################## <- Cycle 240\n\nSo, by carefully timing the CPU instructions and the CRT drawing operations, you should be able to determine whether the sprite is visible the instant each pixel is drawn.\nIf the sprite is positioned such that one of its three pixels is the pixel currently being drawn, the screen produces a lit pixel (#); otherwise, the screen leaves the pixel dark (.).\nThe first few pixels from the larger example above are drawn as follows:\nSprite position: ###.....................................\n\nStart cycle   1: begin executing addx 15\nDuring cycle  1: CRT draws pixel in position 0\nCurrent CRT row: #\n\nDuring cycle  2: CRT draws pixel in position 1\nCurrent CRT row: ##\nEnd of cycle  2: finish executing addx 15 (Register X is now 16)\nSprite position: ...............###......................\n\nStart cycle   3: begin executing addx -11\nDuring cycle  3: CRT draws pixel in position 2\nCurrent CRT row: ##.\n\nDuring cycle  4: CRT draws pixel in position 3\nCurrent CRT row: ##..\nEnd of cycle  4: finish executing addx -11 (Register X is now 5)\nSprite position: ....###.................................\n\nStart cycle   5: begin executing addx 6\nDuring cycle  5: CRT draws pixel in position 4\nCurrent CRT row: ##..#\n\nDuring cycle  6: CRT draws pixel in position 5\nCurrent CRT row: ##..##\nEnd of cycle  6: finish executing addx 6 (Register X is now 11)\nSprite position: ..........###...........................\n\nStart cycle   7: begin executing addx -3\nDuring cycle  7: CRT draws pixel in position 6\nCurrent CRT row: ##..##.\n\nDuring cycle  8: CRT draws pixel in position 7\nCurrent CRT row: ##..##..\nEnd of cycle  8: finish executing addx -3 (Register X is now 8)\nSprite position: .......###..............................\n\nStart cycle   9: begin executing addx 5\nDuring cycle  9: CRT draws pixel in position 8\nCurrent CRT row: ##..##..#\n\nDuring cycle 10: CRT draws pixel in position 9\nCurrent CRT row: ##..##..##\nEnd of cycle 10: finish executing addx 5 (Register X is now 13)\nSprite position: ............###.........................\n\nStart cycle  11: begin executing addx -1\nDuring cycle 11: CRT draws pixel in position 10\nCurrent CRT row: ##..##..##.\n\nDuring cycle 12: CRT draws pixel in position 11\nCurrent CRT row: ##..##..##..\nEnd of cycle 12: finish executing addx -1 (Register X is now 12)\nSprite position: ...........###..........................\n\nStart cycle  13: begin executing addx -8\nDuring cycle 13: CRT draws pixel in position 12\nCurrent CRT row: ##..##..##..#\n\nDuring cycle 14: CRT draws pixel in position 13\nCurrent CRT row: ##..##..##..##\nEnd of cycle 14: finish executing addx -8 (Register X is now 4)\nSprite position: ...###..................................\n\nStart cycle  15: begin executing addx 13\nDuring cycle 15: CRT draws pixel in position 14\nCurrent CRT row: ##..##..##..##.\n\nDuring cycle 16: CRT draws pixel in position 15\nCurrent CRT row: ##..##..##..##..\nEnd of cycle 16: finish executing addx 13 (Register X is now 17)\nSprite position: ................###.....................\n\nStart cycle  17: begin executing addx 4\nDuring cycle 17: CRT draws pixel in position 16\nCurrent CRT row: ##..##..##..##..#\n\nDuring cycle 18: CRT draws pixel in position 17\nCurrent CRT row: ##..##..##..##..##\nEnd of cycle 18: finish executing addx 4 (Register X is now 21)\nSprite position: ....................###.................\n\nStart cycle  19: begin executing noop\nDuring cycle 19: CRT draws pixel in position 18\nCurrent CRT row: ##..##..##..##..##.\nEnd of cycle 19: finish executing noop\n\nStart cycle  20: begin executing addx -1\nDuring cycle 20: CRT draws pixel in position 19\nCurrent CRT row: ##..##..##..##..##..\n\nDuring cycle 21: CRT draws pixel in position 20\nCurrent CRT row: ##..##..##..##..##..#\nEnd of cycle 21: finish executing addx -1 (Register X is now 20)\nSprite position: ...................###..................\n\nAllowing the program to run to completion causes the CRT to produce the following image:\n##..##..##..##..##..##..##..##..##..##..\n###...###...###...###...###...###...###.\n####....####....####....####....####....\n#####.....#####.....#####.....#####.....\n######......######......######......####\n#######.......#######.......#######.....\n\nRender the image given by your program.\nWhat eight capital letters appear on your CRT?",
        "test_input": "addx 15\naddx -11\naddx 6\naddx -3\naddx 5\naddx -1\naddx -8\naddx 13\naddx 4\nnoop\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx 5\naddx -1\naddx -35\naddx 1\naddx 24\naddx -19\naddx 1\naddx 16\naddx -11\nnoop\nnoop\naddx 21\naddx -15\nnoop\nnoop\naddx -3\naddx 9\naddx 1\naddx -3\naddx 8\naddx 1\naddx 5\nnoop\nnoop\nnoop\nnoop\nnoop\naddx -36\nnoop\naddx 1\naddx 7\nnoop\nnoop\nnoop\naddx 2\naddx 6\nnoop\nnoop\nnoop\nnoop\nnoop\naddx 1\nnoop\nnoop\naddx 7\naddx 1\nnoop\naddx -13\naddx 13\naddx 7\nnoop\naddx 1\naddx -33\nnoop\nnoop\nnoop\naddx 2\nnoop\nnoop\nnoop\naddx 8\nnoop\naddx -1\naddx 2\naddx 1\nnoop\naddx 17\naddx -9\naddx 1\naddx 1\naddx -3\naddx 11\nnoop\nnoop\naddx 1\nnoop\naddx 1\nnoop\nnoop\naddx -13\naddx -19\naddx 1\naddx 3\naddx 26\naddx -30\naddx 12\naddx -1\naddx 3\naddx 1\nnoop\nnoop\nnoop\naddx -9\naddx 18\naddx 1\naddx 2\nnoop\nnoop\naddx 9\nnoop\nnoop\nnoop\naddx -1\naddx 2\naddx -37\naddx 1\naddx 3\nnoop\naddx 15\naddx -21\naddx 22\naddx -6\naddx 1\nnoop\naddx 2\naddx 1\nnoop\naddx -10\nnoop\nnoop\naddx 20\naddx 1\naddx 2\naddx 2\naddx -6\naddx -11\nnoop\nnoop\nnoop\n",
        "test_answer": "##..##..##..##..##..##..##..##..##..##..\n###...###...###...###...###...###...###.\n####....####....####....####....####....\n#####.....#####.....#####.....#####.....\n######......######......######......####\n#######.......#######.......#######.....\n",
        "test_answer_idx": -1,
        "answer": "PGPHBEAB"
    }
}
